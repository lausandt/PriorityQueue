/**
 * 
 */
package heaps_priority_queues;

/**
 * @author Lau Sandt
 * https://github.com/lausandt/PriorityQueue
 */
public interface AdaptablePriorityQueue<K, V> {
	
	// an element and its priority are modeled as a key value composite known as an entry Entry<K,V>
	
	/** Returns the number of elements in the priority queue */
	int size();
	
	/** Returns a boolean value indicating if the priority queue is empty */
	boolean isEmpty();
	
	/** Creates and returns an entry with key k and value v in the priority queue */
	Entry<K,V> insert(K key, V value) throws IllegalArgumentException;
	
	/** Returns but does not remove a priority queue entry (k,v) having a minimal key. returns null if the pq is empty */
	Entry<K,V> min();
	
	/** Removes and returns an entry (k,v) having minimal key from the priority queue, returns null if the pq is empty */
	Entry<K,V> removeMin();
	
	/** Removes entry e from the priority queue */
	void remove(Entry<K,V> entry) throws IllegalArgumentException; 
	
	/** Replaces the key of existing entry e, reestablishes order. */
	void replaceKey(Entry<K,V> entry,K key) throws IllegalArgumentException;
	
	/** Replaces the value of existing entry e */
	void replaceValue(Entry<K,V> entry,V value) throws IllegalArgumentException;
	
	

}
